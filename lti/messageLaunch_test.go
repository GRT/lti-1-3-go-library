package lti_test

import (
	"fmt"
	"testing"

	"github.com/dgrijalva/jwt-go"
)

const (
	tokenStr = "eyJhbGciOiJSUzI1NiIsImtpZCI6IkNfbnZRVXNVbW8wNGV0NE9KcER5djN6dGJHTnlHR2tNQ2dDc2JEMVkyY00ifQ.eyJodHRwczovL3B1cmwuaW1zZ2xvYmFsLm9yZy9zcGVjL2x0aS9jbGFpbS9tZXNzYWdlX3R5cGUiOiJMdGlSZXNvdXJjZUxpbmtSZXF1ZXN0IiwiZ2l2ZW5fbmFtZSI6IkFsdmEiLCJmYW1pbHlfbmFtZSI6IktyYWpjaWsiLCJtaWRkbGVfbmFtZSI6IlN0ZXBoYW4iLCJwaWN0dXJlIjoiaHR0cDovL2V4YW1wbGUub3JnL0FsdmEuanBnIiwiZW1haWwiOiJBbHZhLktyYWpjaWtAZXhhbXBsZS5vcmciLCJuYW1lIjoiQWx2YSBTdGVwaGFuIEtyYWpjaWsiLCJodHRwczovL3B1cmwuaW1zZ2xvYmFsLm9yZy9zcGVjL2x0aS9jbGFpbS9yb2xlcyI6WyJodHRwOi8vcHVybC5pbXNnbG9iYWwub3JnL3ZvY2FiL2xpcy92Mi9pbnN0aXR1dGlvbi9wZXJzb24jSW5zdHJ1Y3RvciJdLCJodHRwczovL3B1cmwuaW1zZ2xvYmFsLm9yZy9zcGVjL2x0aS9jbGFpbS9yb2xlX3Njb3BlX21lbnRvciI6WyJhNjJjNTJjMDJiYTI2MjAwM2Y1ZSJdLCJodHRwczovL3B1cmwuaW1zZ2xvYmFsLm9yZy9zcGVjL2x0aS9jbGFpbS9yZXNvdXJjZV9saW5rIjp7ImlkIjoiNzAxIiwidGl0bGUiOiJJdCBMaXZlcyEiLCJkZXNjcmlwdGlvbiI6IiJ9LCJodHRwczovL3B1cmwuaW1zZ2xvYmFsLm9yZy9zcGVjL2x0aS9jbGFpbS9jb250ZXh0Ijp7ImlkIjoiMTQxIiwibGFiZWwiOiJQSFAgTGlicmFyeSAxMDEiLCJ0aXRsZSI6IlBIUCBMaWJyYXJ5IDEwMSIsInR5cGUiOlsiIl19LCJodHRwczovL3B1cmwuaW1zZ2xvYmFsLm9yZy9zcGVjL2x0aS9jbGFpbS90b29sX3BsYXRmb3JtIjp7Im5hbWUiOiJMVEkgMS4zIEJyZWFrb3V0IERlbW9kZnNkZiIsImNvbnRhY3RfZW1haWwiOiIiLCJkZXNjcmlwdGlvbiI6IiIsInVybCI6IiIsInByb2R1Y3RfZmFtaWx5X2NvZGUiOiIiLCJ2ZXJzaW9uIjoiMS4wIn0sImh0dHBzOi8vcHVybC5pbXNnbG9iYWwub3JnL3NwZWMvbHRpLWFncy9jbGFpbS9lbmRwb2ludCI6eyJzY29wZSI6WyJodHRwczovL3B1cmwuaW1zZ2xvYmFsLm9yZy9zcGVjL2x0aS1hZ3Mvc2NvcGUvbGluZWl0ZW0iLCJodHRwczovL3B1cmwuaW1zZ2xvYmFsLm9yZy9zcGVjL2x0aS1hZ3Mvc2NvcGUvcmVzdWx0LnJlYWRvbmx5IiwiaHR0cHM6Ly9wdXJsLmltc2dsb2JhbC5vcmcvc3BlYy9sdGktYWdzL3Njb3BlL3Njb3JlIl0sImxpbmVpdGVtcyI6Imh0dHBzOi8vbHRpLXJpLmltc2dsb2JhbC5vcmcvcGxhdGZvcm1zLzcvY29udGV4dHMvMTQxL2xpbmVfaXRlbXMifSwiaHR0cHM6Ly9wdXJsLmltc2dsb2JhbC5vcmcvc3BlYy9sdGktbnJwcy9jbGFpbS9uYW1lc3JvbGVzZXJ2aWNlIjp7ImNvbnRleHRfbWVtYmVyc2hpcHNfdXJsIjoiaHR0cHM6Ly9sdGktcmkuaW1zZ2xvYmFsLm9yZy9wbGF0Zm9ybXMvNy9jb250ZXh0cy8xNDEvbWVtYmVyc2hpcHMiLCJzZXJ2aWNlX3ZlcnNpb25zIjpbIjIuMCJdfSwiaHR0cHM6Ly9wdXJsLmltc2dsb2JhbC5vcmcvc3BlYy9sdGktY2VzL2NsYWltL2NhbGlwZXItZW5kcG9pbnQtc2VydmljZSI6eyJzY29wZXMiOlsiaHR0cHM6Ly9wdXJsLmltc2dsb2JhbC5vcmcvc3BlYy9sdGktY2VzL3YxcDAvc2NvcGUvc2VuZCJdLCJjYWxpcGVyX2VuZHBvaW50X3VybCI6Imh0dHBzOi8vbHRpLXJpLmltc2dsb2JhbC5vcmcvcGxhdGZvcm1zLzcvc2Vuc29ycyIsImNhbGlwZXJfZmVkZXJhdGVkX3Nlc3Npb25faWQiOiJ1cm46dXVpZDpjYTQ2ZTA4YTEyODc3ZDc1MjZhOCJ9LCJpc3MiOiJodHRwOi8vaW1zZ2xvYmFsLm9yZyIsImF1ZCI6InRlc3RpbmcxMjM0NSIsImlhdCI6MTU1NTgwNjc4MSwiZXhwIjoxNTU1ODA3MDgxLCJzdWIiOiI0OTg0ZTRhNjRjODhjYzI0NTY2NyIsImh0dHBzOi8vcHVybC5pbXNnbG9iYWwub3JnL3NwZWMvbHRpL2NsYWltL2x0aTExX2xlZ2FjeV91c2VyX2lkIjoiNDk4NGU0YTY0Yzg4Y2MyNDU2NjciLCJub25jZSI6IjY5NTljMzUxZmM4YTU4YzBiMmNjIiwiaHR0cHM6Ly9wdXJsLmltc2dsb2JhbC5vcmcvc3BlYy9sdGkvY2xhaW0vdmVyc2lvbiI6IjEuMy4wIiwibG9jYWxlIjoiZW4tVVMiLCJodHRwczovL3B1cmwuaW1zZ2xvYmFsLm9yZy9zcGVjL2x0aS9jbGFpbS9sYXVuY2hfcHJlc2VudGF0aW9uIjp7ImRvY3VtZW50X3RhcmdldCI6ImlmcmFtZSIsImhlaWdodCI6MzIwLCJ3aWR0aCI6MjQwLCJyZXR1cm5fdXJsIjoiaHR0cHM6Ly9sdGktcmkuaW1zZ2xvYmFsLm9yZy9wbGF0Zm9ybXMvNy9yZXR1cm5zIn0sImh0dHBzOi8vd3d3LmV4YW1wbGUuY29tL2V4dGVuc2lvbiI6eyJjb2xvciI6InZpb2xldCJ9LCJodHRwczovL3B1cmwuaW1zZ2xvYmFsLm9yZy9zcGVjL2x0aS9jbGFpbS9jdXN0b20iOnsidGVzdCI6InRlc3RpbmcifSwiaHR0cHM6Ly9wdXJsLmltc2dsb2JhbC5vcmcvc3BlYy9sdGkvY2xhaW0vZGVwbG95bWVudF9pZCI6IjEyMzQiLCJodHRwczovL3B1cmwuaW1zZ2xvYmFsLm9yZy9zcGVjL2x0aS9jbGFpbS90YXJnZXRfbGlua191cmkiOiJodHRwOi8vbG9jYWxob3N0OjkwMDEvZXhhbXBsZS9sYXVuY2gucGhwIn0.qZtNjzpoDaZUu0y23jLAY77MWHFhEm_m5evmm8vnT6oRBRDLXh-RCfpD6Vs-Fy64nwHkGo_WArZGGDKZ8h6V817ru3oFOrX7pb_LyyhfWTFhwO_8Og0K1EAX0USZRGk0y2AuNPd8bIYPISCT-5qCcDOps0aj_9NO0gmBW5RT-KKdbgkMiLkfjU7x8qmSy682tRLajhY-mNyLBERJSGUWHJvq6kUFZfLbCVVk1b1KIDsPkidzYTCDqlu88YaLt6MTVQN6neJTWhkhBA5aWfpzoaz13LRHIYnJnuJ9-t6VkKf-WuP0IqNwa93GDsChu_xMwfzMe2s8vZN8-xddXt4cbA"
)

func TestExploration(t *testing.T) {
	// not so much a test, more about poking around
	token, err := jwt.Parse(tokenStr, nil)
	if err != nil {
		// t.Fatalf("womp womp: %v", err)
	}
	// fmt.Printf("Token: %+v", token)

	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		t.Fatalf("problem getting claims!")
	}
	fmt.Printf("\nclaims: %v\n", claims)

	rl, ok := claims["https://purl.imsglobal.org/spec/lti/claim/resource_link"].(map[string]interface{})
	if !ok {
		t.Fatalf("Resource Link missing from token")
	}
	fmt.Printf("\n\nresource Link claim: %v\n", rl)

	if id, ok := rl["id"].(string); ok {
		fmt.Printf("resource link id: %q\n", id)
	} else {
		t.Fatalf("resource link map should contain an id attribute (resource link: %v)", rl)
	}
}
